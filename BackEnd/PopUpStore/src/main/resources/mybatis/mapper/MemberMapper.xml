<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapper파일을 구성하기 위한 Doctype설정 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	서비스 인터페이스를 namespace로 지정한다. 컨트롤러에서 해당 인터페이스를 
	통해 Mapper의 메서드를 호출하게 된다. 
-->
<!-- MyUserDTO를 IMyUserDao에 넣는다.
(namespace는 이 매퍼가 어떤 인터페이스와 관련된 매퍼인지를 알려준다)-->

<mapper namespace="com.popup.project.member.mapper.UserMapper"> 
	
	<insert id="register">
    INSERT INTO USERS
    (USER_ID, USER_NICK, USER_PWD, USER_NAME, USER_PHONE, USER_EMAIL, USER_ZIPCODE, USER_ADDRESS, USER_CREATE_DATE, AUTHORITY)
    VALUES 
    (#{userId}, #{userNick}, #{userPwd}, #{userName}, #{userPhone}, #{userEmail}, #{userZipcode}, #{userAddress}, COALESCE(#{userCreatedate,jdbcType=TIMESTAMP}, CURRENT_TIMESTAMP),
        <choose>
            <when test="userId == 'Admin'">
                'ROLE_ADMIN'
            </when>
            <otherwise>
                'ROLE_USER'
            </otherwise>
        </choose>
    )
	</insert>
	
	
	<select id="IdCheck" parameterType="String" resultType="Integer">
		SELECT COUNT(*)
		FROM USERS
		WHERE USER_ID = #{userId}
	</select>
	
	<select id="NickCheck" parameterType="String" resultType="Integer">
		SELECT COUNT(*)
		FROM USERS
		WHERE USER_NICK = #{userNick}
	</select>
	
	<select id="EmailCheck" parameterType="String" resultType="Integer">
		SELECT COUNT(*)
		FROM USERS
		WHERE USER_Email = #{userEmail}
	</select>
	
	<select id="PhoneCheck" parameterType="String" resultType="Integer">
		SELECT COUNT(*)
		FROM USERS
		WHERE USER_Phone = #{userPhone}
	</select>
	
	<select id="FindId" parameterType="map" resultType="String">
	    SELECT USER_ID
	    FROM USERS
	    WHERE LOWER(USER_NAME) = LOWER(#{name})
	    AND USER_PHONE = #{phone}
	</select>
	
	<select id="checkUserNameAndEmail" resultType="int">
	    SELECT COUNT(*) 
	    FROM USERS
	    WHERE USER_NAME = #{userName} 
        AND USER_EMAIL = #{userEmail}	
	</select>
	
	<update id="updatePasswordByEmail">
        UPDATE USERS
        SET USER_PWD = #{password, jdbcType=VARCHAR}
        WHERE USER_EMAIL = #{email, jdbcType=VARCHAR}
    </update>
	
	<!-- 사용자 비밀번호 조회 -->
    <select id="getPasswordByUserId" parameterType="String" resultType="String">
        SELECT USER_PWD
        FROM USERS
        WHERE USER_ID = #{userId}
    </select>

    <!-- 사용자 정보 수정 -->
    <update id="updateUserInfo">
	    UPDATE USERS
	    SET
	        USER_NICK = CASE WHEN #{userNick, jdbcType=VARCHAR} IS NOT NULL THEN #{userNick, jdbcType=VARCHAR} ELSE USER_NICK END,
	        USER_PHONE = CASE WHEN #{userPhone, jdbcType=VARCHAR} IS NOT NULL THEN #{userPhone, jdbcType=VARCHAR} ELSE USER_PHONE END,
	        USER_EMAIL = CASE WHEN #{userEmail, jdbcType=VARCHAR} IS NOT NULL THEN #{userEmail, jdbcType=VARCHAR} ELSE USER_EMAIL END,
	        USER_PWD = CASE WHEN #{userPwd, jdbcType=VARCHAR} IS NOT NULL THEN #{userPwd, jdbcType=VARCHAR} ELSE USER_PWD END,
	        USER_ZIPCODE = CASE WHEN #{userZipcode, jdbcType=VARCHAR} IS NOT NULL THEN #{userZipcode, jdbcType=VARCHAR} ELSE USER_ZIPCODE END,
	        USER_ADDRESS = CASE WHEN #{userAddress, jdbcType=VARCHAR} IS NOT NULL THEN #{userAddress, jdbcType=VARCHAR} ELSE USER_ADDRESS END
	    WHERE USER_ID = #{userId, jdbcType=VARCHAR}
	</update>
	
	<select id="getUserByUsername" resultType="com.popup.project.member.dto.UserDTO">
	    SELECT 
	        USER_ID as userId,
	        USER_NICK as userNick,
	        USER_PWD as userPwd,
	        USER_NAME as userName,
	        USER_PHONE as userPhone,
	        USER_EMAIL as userEmail,
	        USER_ZIPCODE as userZipcode,
	        USER_ADDRESS as userAddress,
	        USER_CREATE_DATE as userCreatedate,
	        AUTHORITY as userAuthority,
	        ENABLED as enabled,
	        FAILED_ATTEMPTS as failedAttempts,
	        ACCOUNT_LOCKED AS accountLocked
	    FROM users 
	    WHERE user_id = #{userId}
	</select>
	
	<delete id="deleteUserById" parameterType="String">
	    DELETE 
	    FROM USERS 
	    WHERE USER_ID = #{userId}
	</delete>
	
	<!-- 소셜 로그인 사용자를 조회하는 쿼리 -->
    <select id="findBySocialIdAndProvider" parameterType="map" resultType="com.popup.project.member.dto.UserDTO">
        SELECT 
            USER_ID as userId,
            USER_NICK as userNick,
            USER_PWD as userPwd,
            USER_NAME as userName,
            USER_PHONE as userPhone,
            USER_EMAIL as userEmail,
            USER_ZIPCODE as userZipcode,
            USER_ADDRESS as userAddress,
            USER_CREATE_DATE as userCreatedate,
            AUTHORITY as userAuthority,
            ENABLED as enabled,
            SOCIAL_ID as socialId,
            SOCIAL_PROVIDER as socialProvider,
            SOCIAL_EMAIL as socialEmail
        FROM USERS
        WHERE SOCIAL_ID = #{socialId} AND SOCIAL_PROVIDER = #{provider}
    </select>
	
	<select id="findSocialProvider" parameterType="map" resultType="com.popup.project.member.dto.UserDTO">
        SELECT 
            USER_ID as userId,
            USER_NICK as userNick,
            USER_PWD as userPwd,
            USER_NAME as userName,
            USER_PHONE as userPhone,
            USER_EMAIL as userEmail,
            USER_ZIPCODE as userZipcode,
            USER_ADDRESS as userAddress,
            USER_CREATE_DATE as userCreatedate,
            AUTHORITY as userAuthority,
            ENABLED as enabled,
            SOCIAL_ID as socialId,
            SOCIAL_PROVIDER as socialProvider,
            SOCIAL_EMAIL as socialEmail
        FROM USERS
        WHERE SOCIAL_PROVIDER = #{socialProvider}
    </select>
	
	
    <!-- 소셜 로그인 사용자를 등록하는 쿼리 -->
    <insert id="saveSocialUser" parameterType="com.popup.project.member.dto.UserDTO">
	    INSERT INTO USERS
	    (USER_ID, USER_NICK, USER_PWD, USER_NAME, USER_PHONE, USER_EMAIL, USER_ZIPCODE, USER_ADDRESS, USER_CREATE_DATE, AUTHORITY, ENABLED, SOCIAL_ID, SOCIAL_PROVIDER, SOCIAL_EMAIL)
	    VALUES
	    (#{userId, jdbcType=VARCHAR}, #{userNick, jdbcType=VARCHAR}, #{userPwd, jdbcType=VARCHAR}, #{userName, jdbcType=VARCHAR}, #{userPhone, jdbcType=VARCHAR}, #{userEmail, jdbcType=VARCHAR},
	     #{userZipcode, jdbcType=VARCHAR}, #{userAddress, jdbcType=VARCHAR}, COALESCE(#{userCreatedate,jdbcType=TIMESTAMP}, CURRENT_TIMESTAMP),
	     #{userAuthority, jdbcType=VARCHAR}, #{enabled, jdbcType=INTEGER}, #{socialId, jdbcType=VARCHAR}, #{socialProvider, jdbcType=VARCHAR}, #{socialEmail, jdbcType=VARCHAR})
	</insert>
    
    <!-- 소셜 로그인 사용자의 정보를 업데이트하는 쿼리 -->
    <update id="updateUserBySocialIdAndProvider" parameterType="com.popup.project.member.dto.UserDTO">
	    UPDATE USERS
	    SET 
	        USER_NICK = #{userNick},
	        USER_NAME = #{userName},
	        USER_PHONE = #{userPhone},
	        USER_EMAIL = #{userEmail},
	        USER_ZIPCODE = #{userZipcode},
	        USER_ADDRESS = #{userAddress}
	    WHERE social_id = #{socialId}
	    AND social_provider = #{socialProvider}
	</update>
	
	<update id="updateFailedAttempts">
        UPDATE USERS
        SET FAILED_ATTEMPTS = #{failedAttempts}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 계정 잠금 처리 -->
    <update id="lockAccount">
        UPDATE USERS
        SET ACCOUNT_LOCKED = 1
        WHERE USER_ID = #{userId}
    </update>

    <!-- 계정 잠금 해제 -->
    <update id="unlockAccount">
        UPDATE USERS
        SET ACCOUNT_LOCKED = 0, FAILED_ATTEMPTS = 0
        WHERE USER_ID = #{userId}
    </update>

    <!-- Admin 권한 확인 -->
    <select id="getUserAuthority" parameterType="String" resultType="String">
        SELECT AUTHORITY 
        FROM USERS 
        WHERE USER_ID = #{userId}
    </select>
	
	<select id="getFailedAttempts" parameterType="String" resultType="int">
	    SELECT FAILED_ATTEMPTS
	    FROM USERS
	    WHERE USER_ID = #{userId}
	</select>
	
	<update id="unlockAccountByEmail">
	    UPDATE USERS
	    SET ACCOUNT_LOCKED = 0, FAILED_ATTEMPTS = 0
	    WHERE USER_EMAIL = #{email}
	</update>
	
	<update id="resetFailedAttemptsByEmail">
	    UPDATE USERS
	    SET FAILED_ATTEMPTS = 0
	    WHERE USER_EMAIL = #{email}
	</update>
	
</mapper>